{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "practicekdadf"
		},
		"Practicestoragekdlinkservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Practicestoragekdlinkservice'"
		},
		"SqlSererlinkservie_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlSererlinkservie'"
		},
		"SqlServer1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServer1'"
		},
		"SqlServer2_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServer2'"
		},
		"SqlServerlookup_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServerlookup'"
		},
		"SqlServerstoreprocedure_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServerstoreprocedure'"
		},
		"SqlSererlinkservie_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "abcd.company.net"
		},
		"SqlSererlinkservie_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "kanitabce"
		},
		"SqlSererlinkservie_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "Kanit"
		},
		"SqlServer1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "mydbserver.windows.net"
		},
		"SqlServer1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "@{linkedService().dbName}"
		},
		"SqlServer1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "kanit"
		},
		"SqlServer2_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "@{linkedService().server}"
		},
		"SqlServer2_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "@{linkedService().dbname}"
		},
		"SqlServer2_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "@{linkedService().user}"
		},
		"SqlServerlookup_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "abcd.company.database.windows.net"
		},
		"SqlServerlookup_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "abcdkanit"
		},
		"SqlServerlookup_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "Kanit"
		},
		"SqlServerstoreprocedure_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "DEVYANI_P"
		},
		"SqlServerstoreprocedure_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "Test_DB"
		},
		"SqlServerstoreprocedure_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "HR"
		},
		"trigger1_properties_copydatastrproceduretrigger_parameters_tablenamefrompipeline": {
			"type": "string",
			"defaultValue": "Table1"
		},
		"trigger1_properties_copydatastrproceduretrigger_parameters_dbnamefrompipeline": {
			"type": "string",
			"defaultValue": "dbsource"
		},
		"trigger1_properties_copydatastrproceduretrigger_parameters_destinationtable": {
			"type": "string",
			"defaultValue": "table2"
		},
		"trigger1_properties_copydatastrproceduretrigger_parameters_destinationdbname": {
			"type": "string",
			"defaultValue": "dbdestination"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Deletepipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "filesdeleted",
								"value": "CSV file deleted"
							}
						],
						"typeProperties": {
							"dataset": {
								"referenceName": "deletedata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "Practicestoragekdlinkservice",
									"type": "LinkedServiceReference"
								},
								"path": "datafactorykdcontnr"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": false,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-05T05:56:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/deletedata')]",
				"[concat(variables('factoryId'), '/linkedServices/Practicestoragekdlinkservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Masterpipelineexecute')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "settingupvariables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"filenamep": "Salesind"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-05T08:38:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/settingupvariables')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Split_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Splitdata",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Splitdataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employedata": {},
									"sinkIT": {},
									"sinkHR": {},
									"sinkFinance": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-07T11:03:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Splitdataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/apendfilenm')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append variable1",
						"type": "AppendVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "sales_var",
							"value": {
								"value": "@string(pipeline().parameters.file_apend)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"file_apend": {
						"type": "string",
						"defaultValue": "SalesInd"
					}
				},
				"variables": {
					"sales_var": {
						"type": "Array",
						"defaultValue": [
							"pak",
							"end"
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-05T08:38:14Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/copydatastrproceduretrigger')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_SQL_table",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.tablenamefrompipeline",
										"type": "Expression"
									},
									"dbname_datasetscope": {
										"value": "@pipeline().parameters.dbnamefrompipeline",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dataset_SQL_table",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.destinationtable",
										"type": "Expression"
									},
									"dbname_datasetscope": {
										"value": "@pipeline().parameters.destinationdbname",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "storedprocedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@pipeline().DataFactory",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServer2",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tablenamefrompipeline": {
						"type": "string"
					},
					"dbnamefrompipeline": {
						"type": "string"
					},
					"destinationtable": {
						"type": "string"
					},
					"destinationdbname": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-05T04:53:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_SQL_table')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServer2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowactivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "filterdataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"inputdt": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-07T08:18:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/filterdataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/filterpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.arrayofinput",
								"type": "Expression"
							},
							"condition": {
								"value": "@greater(item(),3)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"arrayofinput": {
						"type": "array",
						"defaultValue": [
							1,
							2,
							3,
							4,
							5,
							6
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-05T12:13:49Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/foreachpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.folederpath",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "inputdataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "foreachdata",
											"type": "DatasetReference",
											"parameters": {
												"foldernme": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"folederpath": {
						"type": "array",
						"defaultValue": [
							"output1",
							"output2",
							"output3"
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-05T12:13:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/inputdataset')]",
				"[concat(variables('factoryId'), '/datasets/foreachdata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/gitpipelineprac')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 5
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "empdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "outputempdept",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"copyemp": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empdata')]",
				"[concat(variables('factoryId'), '/datasets/outputempdept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ifconditionandwaitcond')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Condition",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Wait",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(pipeline().parameters.copydata)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy data2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "inputdataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "copyifdata",
											"type": "DatasetReference",
											"parameters": {
												"outputpath": {
													"value": "@pipeline().parameters.copyoutput2",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "inputdataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "copyifdata",
											"type": "DatasetReference",
											"parameters": {
												"outputpath": {
													"value": "@pipeline().parameters.copyoutput1",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Wait",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.waitfor10sec",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"copydata": {
						"type": "string",
						"defaultValue": "true"
					},
					"copyoutput1": {
						"type": "string",
						"defaultValue": "copyoutput1"
					},
					"copyoutput2": {
						"type": "string",
						"defaultValue": "copyoutput2"
					},
					"waitfor10sec": {
						"type": "int",
						"defaultValue": 10
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-06T08:24:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/inputdataset')]",
				"[concat(variables('factoryId'), '/datasets/copyifdata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lookupactivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select foldername\nfrom tbl_outputfolder",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerlookuptable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "inputdataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "outputlookup",
											"type": "DatasetReference",
											"parameters": {
												"foldername": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-06T15:22:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerlookuptable')]",
				"[concat(variables('factoryId'), '/datasets/inputdataset')]",
				"[concat(variables('factoryId'), '/datasets/outputlookup')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/metadataifpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Metadatapractice",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "inputdataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "If Condition",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Metadatapractice",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(formatDateTime(utcnow(),'yyyy-MM-dd'),activity('Metadatapractice').formatDateTime(output.lastModified,'yyyy-MM-dd'))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "inputdataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "outputdataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-06T08:24:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/inputdataset')]",
				"[concat(variables('factoryId'), '/datasets/outputdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/parameterdataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "parameterizeddata",
								"type": "DataFlowReference",
								"parameters": {
									"deptpar": {
										"value": "'@{pipeline().parameters.deptname}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"parameterisedfilter": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"deptname": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-10T12:35:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/parameterizeddata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/settingupvariables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set_frequency",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "frequency",
							"value": {
								"value": "@replace(pipeline().parameters.filenamep,'Sales','')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"filenamep": {
						"type": "string",
						"defaultValue": "DailySales"
					}
				},
				"variables": {
					"frequency": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-05T08:15:33Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/source2destinationtxt')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "inputdataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "outputdataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-05T04:53:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/inputdataset')]",
				"[concat(variables('factoryId'), '/datasets/outputdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/source2dmappingcsv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "datafactorykdcontnr/Input/dataADF.csv"
							},
							{
								"name": "Destination",
								"value": "datafactorykdcontnr/Output/destinationADF"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Kanit",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "30",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "30",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Kanit",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DataADF",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DataADFdestination",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 5
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-05T04:58:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataADF')]",
				"[concat(variables('factoryId'), '/datasets/DataADFdestination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/storeprocedureactivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "abcd"
						},
						"linkedServiceName": {
							"referenceName": "SqlServerstoreprocedure",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-07T03:52:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerstoreprocedure')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/untilactivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(pipeline().parameters.untilcheck)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "inputdataset",
											"type": "DatasetReference",
											"parameters": {}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(activity('Get Metadata1').output.exists)\n",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 20
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "filevar",
													"value": "true"
												}
											}
										]
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Until1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "inputdataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "copyifdata",
								"type": "DatasetReference",
								"parameters": {
									"outputpath": {
										"value": "@pipeline().parameters.untilcheck",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"untilcheck": {
						"type": "string",
						"defaultValue": "false"
					}
				},
				"variables": {
					"filevar": {
						"type": "String",
						"defaultValue": "false"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-06T11:23:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/inputdataset')]",
				"[concat(variables('factoryId'), '/datasets/copyifdata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/wranglingpractice')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Power Query1",
						"type": "ExecuteWranglingDataflow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "WranglingDTFoverview",
								"type": "DataFlowReference",
								"datasetParameters": {
									"empdata": {},
									"UserQueryoutputempdept": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"queries": [
								{
									"queryName": "UserQuery",
									"dataflowSinks": [
										{
											"name": "UserQueryoutputempdept",
											"dataset": {
												"referenceName": "outputempdept",
												"type": "DatasetReference",
												"parameters": {}
											},
											"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> UserQueryoutputempdept"
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-10T16:14:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/WranglingDTFoverview')]",
				"[concat(variables('factoryId'), '/datasets/outputempdept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataADF')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Practicestoragekdlinkservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "dataADF.csv",
						"folderPath": "Input",
						"container": "datafactorykdcontnr"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Practicestoragekdlinkservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataADFdestination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Practicestoragekdlinkservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "destinationADF",
						"folderPath": "Output",
						"container": "datafactorykdcontnr"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Practicestoragekdlinkservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Practicestoragekdlinkservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Deptdata.csv",
						"folderPath": "Input",
						"container": "datafactorykdcontnr"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "dept",
						"type": "String"
					},
					{
						"name": "deptname",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Practicestoragekdlinkservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HR')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Practicestoragekdlinkservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "HR",
						"folderPath": "Output",
						"container": "datafactorykdcontnr"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "dept",
						"type": "String"
					},
					{
						"name": "grade",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Practicestoragekdlinkservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Practicestoragekdlinkservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "IT",
						"folderPath": "Output",
						"container": "datafactorykdcontnr"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "dept",
						"type": "String"
					},
					{
						"name": "grade",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Practicestoragekdlinkservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Practicestoragekdlinkservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "sample1.json",
						"folderPath": "Input",
						"container": "datafactorykdcontnr"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"name": {
							"type": "string"
						},
						"age": {
							"type": "integer"
						},
						"city": {
							"type": "string"
						},
						"married": {
							"type": "boolean"
						},
						"hobbies": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"address": {
							"type": "object",
							"properties": {
								"street": {
									"type": "string"
								},
								"city": {
									"type": "string"
								},
								"postal_code": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Practicestoragekdlinkservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Practicestoragekdlinkservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Practicestoragekdlinkservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerlookuptable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlSererlinkservie",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlSererlinkservie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyifdata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Practicestoragekdlinkservice",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"outputpath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().outputpath",
							"type": "Expression"
						},
						"container": "datafactorykdcontnr"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Practicestoragekdlinkservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_SQL_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer2",
					"type": "LinkedServiceReference",
					"parameters": {
						"dbname": {
							"value": "@dataset().dbname_datasetscope",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"TableName": {
						"type": "string"
					},
					"dbname_datasetscope": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/deletedata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Practicestoragekdlinkservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "deletedata.csv",
						"folderPath": "Output",
						"container": "datafactorykdcontnr"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "age",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Practicestoragekdlinkservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dept')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Practicestoragekdlinkservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Deptdata.csv",
						"folderPath": "Input",
						"container": "datafactorykdcontnr"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "dept",
						"type": "String"
					},
					{
						"name": "deptname",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Practicestoragekdlinkservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/empdata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Practicestoragekdlinkservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Empdata.csv",
						"folderPath": "Input",
						"container": "datafactorykdcontnr"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "dept",
						"type": "String"
					},
					{
						"name": "grade",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Practicestoragekdlinkservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/foreachdata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Practicestoragekdlinkservice",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"foldernme": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().foldernme",
							"type": "Expression"
						},
						"container": "datafactorykdcontnr"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Practicestoragekdlinkservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/inputdataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Practicestoragekdlinkservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Data.txt",
						"folderPath": "Input",
						"container": "datafactorykdcontnr"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Practicestoragekdlinkservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/outputdataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Practicestoragekdlinkservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Data.txt",
						"folderPath": "Output",
						"container": "datafactorykdcontnr"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Practicestoragekdlinkservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/outputempdept')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Practicestoragekdlinkservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Output",
						"container": "datafactorykdcontnr"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Practicestoragekdlinkservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/outputlookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Practicestoragekdlinkservice",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"foldername": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().foldername",
							"type": "Expression"
						},
						"container": "datafactorykdcontnr"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Practicestoragekdlinkservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/outputsplit')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Practicestoragekdlinkservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Output",
						"container": "datafactorykdcontnr"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Practicestoragekdlinkservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/parameterized')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Practicestoragekdlinkservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "emp_gender_data.csv",
						"folderPath": "Input",
						"container": "datafactorykdcontnr"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "dept",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Practicestoragekdlinkservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pivotgender')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Practicestoragekdlinkservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "emp_gender_data.csv",
						"folderPath": "Input",
						"container": "datafactorykdcontnr"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "dept",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Practicestoragekdlinkservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/windowtransferin')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Practicestoragekdlinkservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "emp_salaryavg_data.csv",
						"folderPath": "Input",
						"container": "datafactorykdcontnr"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "dept",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "salary",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Practicestoragekdlinkservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Practicestoragekdlinkservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('Practicestoragekdlinkservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlSererlinkservie')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('SqlSererlinkservie_properties_typeProperties_server')]",
					"database": "[parameters('SqlSererlinkservie_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('SqlSererlinkservie_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlSererlinkservie_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"dbName": {
						"type": "string"
					},
					"serverName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('SqlServer1_properties_typeProperties_server')]",
					"database": "[parameters('SqlServer1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('SqlServer1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServer1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"dbname": {
						"type": "string"
					},
					"user": {
						"type": "string"
					},
					"server": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('SqlServer2_properties_typeProperties_server')]",
					"database": "[parameters('SqlServer2_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('SqlServer2_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServer2_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerlookup')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('SqlServerlookup_properties_typeProperties_server')]",
					"database": "[parameters('SqlServerlookup_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('SqlServerlookup_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServerlookup_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerstoreprocedure')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('SqlServerstoreprocedure_properties_typeProperties_server')]",
					"database": "[parameters('SqlServerstoreprocedure_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('SqlServerstoreprocedure_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServerstoreprocedure_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "copydatastrproceduretrigger",
							"type": "PipelineReference"
						},
						"parameters": {
							"tablenamefrompipeline": "[parameters('trigger1_properties_copydatastrproceduretrigger_parameters_tablenamefrompipeline')]",
							"dbnamefrompipeline": "[parameters('trigger1_properties_copydatastrproceduretrigger_parameters_dbnamefrompipeline')]",
							"destinationtable": "[parameters('trigger1_properties_copydatastrproceduretrigger_parameters_destinationtable')]",
							"destinationdbname": "[parameters('trigger1_properties_copydatastrproceduretrigger_parameters_destinationdbname')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2025-02-04T11:43:00",
						"endTime": "2025-02-04T13:44:51",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/copydatastrproceduretrigger')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/irpracticeselfhost')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Derived_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empdata",
								"type": "DatasetReference"
							},
							"name": "inputemp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputsplit",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp as string,",
						"          name as string,",
						"          dept as string,",
						"          grade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> inputemp",
						"inputemp derive(name = upper(name),",
						"          dept = iif(isNull(dept),'Unknown', upper(dept))) ~> derivedColumn",
						"derivedColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['derived'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empdata')]",
				"[concat(variables('factoryId'), '/datasets/outputsplit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Select_DF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empdata",
								"type": "DatasetReference"
							},
							"name": "selectemp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputempdept",
								"type": "DatasetReference"
							},
							"name": "outselect"
						}
					],
					"transformations": [
						{
							"name": "empselect"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp as string,",
						"          name as string,",
						"          dept as string,",
						"          grade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> selectemp",
						"selectemp select(mapColumn(",
						"          Name = name,",
						"          Employee = emp,",
						"          Deprtment = dept",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> empselect",
						"empselect sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['selectout'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> outselect"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empdata')]",
				"[concat(variables('factoryId'), '/datasets/outputempdept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Splitdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empdata",
								"type": "DatasetReference"
							},
							"name": "employedata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputsplit",
								"type": "DatasetReference"
							},
							"name": "sinkIT"
						},
						{
							"dataset": {
								"referenceName": "outputsplit",
								"type": "DatasetReference"
							},
							"name": "sinkHR"
						},
						{
							"dataset": {
								"referenceName": "outputsplit",
								"type": "DatasetReference"
							},
							"name": "sinkFinance"
						}
					],
					"transformations": [
						{
							"name": "Finance"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp as string,",
						"          name as string,",
						"          dept as string,",
						"          grade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employedata",
						"employedata split(dept==\"D1\",",
						"     dept==\"D2\",",
						"     dept==\"D3\",",
						"     disjoint: false) ~> Finance@(IT, HR, Finance)",
						"Finance@IT sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['IT'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkIT",
						"Finance@HR sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['HR'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkHR",
						"Finance@Finance sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Finance'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkFinance"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empdata')]",
				"[concat(variables('factoryId'), '/datasets/outputsplit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Union_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "IT",
								"type": "DatasetReference"
							},
							"name": "IT"
						},
						{
							"dataset": {
								"referenceName": "HR",
								"type": "DatasetReference"
							},
							"name": "HR"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputempdept",
								"type": "DatasetReference"
							},
							"name": "sinkunion"
						}
					],
					"transformations": [
						{
							"name": "union"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp as string,",
						"          name as string,",
						"          dept as string,",
						"          grade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> IT",
						"source(output(",
						"          emp as string,",
						"          name as string,",
						"          dept as string,",
						"          grade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> HR",
						"IT, HR union(byName: true)~> union",
						"union sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Uniondata'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkunion"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/IT')]",
				"[concat(variables('factoryId'), '/datasets/HR')]",
				"[concat(variables('factoryId'), '/datasets/outputempdept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WranglingDTFoverview')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "empdata",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> empdata",
							"dataset": {
								"referenceName": "empdata",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared empdata = let AdfDoc = AzureStorage.BlobContents(\"https://storagekdsa.blob.core.windows.net/datafactorykdcontnr/Input/Empdata.csv\"),Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]) in  PromotedHeaders;\r\nshared UserQuery = let Source = #\"empdata\",\r\n  #\"Removed columns\" = Table.RemoveColumns(Source, {\"grade\"}) in #\"Removed columns\";\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empdata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/agrregate_join_function')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empdata",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "empdata",
								"type": "DatasetReference"
							},
							"name": "empfresh"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputempdept",
								"type": "DatasetReference"
							},
							"name": "outputaggremp"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "joinagrregateemp"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp as string,",
						"          name as string,",
						"          dept as string,",
						"          grade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          emp as string,",
						"          name as string,",
						"          dept as string,",
						"          grade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empfresh",
						"source1 aggregate(groupBy(dept),",
						"     totalemp = count(emp)) ~> aggregate1",
						"aggregate1, empfresh join(aggregate1@dept == empfresh@dept,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinagrregateemp",
						"joinagrregateemp sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['outputjoinaggremp'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> outputaggremp"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empdata')]",
				"[concat(variables('factoryId'), '/datasets/outputempdept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/exitsdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empdata",
								"type": "DatasetReference"
							},
							"name": "emp"
						},
						{
							"dataset": {
								"referenceName": "dept",
								"type": "DatasetReference"
							},
							"name": "dept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputempdept",
								"type": "DatasetReference"
							},
							"name": "sinkoutexist"
						}
					],
					"transformations": [
						{
							"name": "exists"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp as string,",
						"          name as string,",
						"          dept as string,",
						"          grade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> emp",
						"source(output(",
						"          dept as string,",
						"          deptname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dept",
						"emp, dept exists(emp@dept == dept@dept,",
						"     negate:false,",
						"     broadcast: 'auto')~> exists",
						"exists sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['existempdept'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkoutexist"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empdata')]",
				"[concat(variables('factoryId'), '/datasets/dept')]",
				"[concat(variables('factoryId'), '/datasets/outputempdept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/filterdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empdata",
								"type": "DatasetReference"
							},
							"name": "inputdt"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputempdept",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp as string,",
						"          name as string,",
						"          dept as string,",
						"          grade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> inputdt",
						"inputdt filter(emp=='102') ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['outputempfilter'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          emp,",
						"          name,",
						"          dept,",
						"          grade",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empdata')]",
				"[concat(variables('factoryId'), '/datasets/outputempdept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/flattenjson')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json1",
								"type": "DatasetReference"
							},
							"name": "flattenjson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Json2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          age as integer,",
						"          city as string,",
						"          married as boolean,",
						"          hobbies as string[],",
						"          address as (street as string, city as string, postal_code as string)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'singleDocument') ~> flattenjson",
						"flattenjson foldDown(unroll(hobbies),",
						"     mapColumn(",
						"          name,",
						"          age,",
						"          city,",
						"          married,",
						"          hobbies,",
						"          address",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten",
						"flatten sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['flattenjson.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json1')]",
				"[concat(variables('factoryId'), '/datasets/Json2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/joinempdept')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empdata",
								"type": "DatasetReference"
							},
							"name": "emp"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "dept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputempdept",
								"type": "DatasetReference"
							},
							"name": "outdepemp"
						}
					],
					"transformations": [
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp as string,",
						"          name as string,",
						"          dept as string,",
						"          grade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> emp",
						"source(output(",
						"          dept as string,",
						"          deptname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dept",
						"emp, dept join(emp@dept == dept@dept,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['payrollempout'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          employee = emp,",
						"          name,",
						"          grade,",
						"          {department name} = deptname",
						"     ),",
						"     partitionBy('hash', 1)) ~> outdepemp"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empdata')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/outputempdept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lookup')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empdata",
								"type": "DatasetReference"
							},
							"name": "employee"
						},
						{
							"dataset": {
								"referenceName": "dept",
								"type": "DatasetReference"
							},
							"name": "department"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputempdept",
								"type": "DatasetReference"
							},
							"name": "output"
						}
					],
					"transformations": [
						{
							"name": "lookup"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp as string,",
						"          name as string,",
						"          dept as string,",
						"          grade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"source(output(",
						"          dept as string,",
						"          deptname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> department",
						"employee, department lookup(employee@dept == department@dept,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup",
						"lookup sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['looupoutput'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> output"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empdata')]",
				"[concat(variables('factoryId'), '/datasets/dept')]",
				"[concat(variables('factoryId'), '/datasets/outputempdept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mergeandgroupbyquery')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "empdata",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> empdata",
							"dataset": {
								"referenceName": "empdata",
								"type": "DatasetReference"
							}
						},
						{
							"name": "dept",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> dept",
							"dataset": {
								"referenceName": "dept",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared empdata = let AdfDoc = AzureStorage.BlobContents(\"https://storagekdsa.blob.core.windows.net/datafactorykdcontnr/Input/Empdata.csv\"),Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]) in  PromotedHeaders;\r\nshared dept = let AdfDoc = AzureStorage.BlobContents(\"https://storagekdsa.blob.core.windows.net/datafactorykdcontnr/Input/Deptdata.csv\"),Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]) in  PromotedHeaders;\r\nshared UserQuery = let Source = #\"empdata\",\r\n  #\"Merged queries\" = Table.NestedJoin(Source, {\"dept\"}, dept, {\"dept\"}, \"dept (2)\", JoinKind.LeftOuter),\r\n  #\"Expanded dept (2)\" = Table.ExpandTableColumn(#\"Merged queries\", \"dept (2)\", {\"deptname\"}, {\"deptname\"}),\r\n  #\"Grouped rows\" = Table.Group(#\"Expanded dept (2)\", {\"dept\"}, {{\"employe_count\", each Table.RowCount(_), Int64.Type}}) in #\"Grouped rows\";\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empdata')]",
				"[concat(variables('factoryId'), '/datasets/dept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/newbranch')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empdata",
								"type": "DatasetReference"
							},
							"name": "employee"
						},
						{
							"dataset": {
								"referenceName": "dept",
								"type": "DatasetReference"
							},
							"name": "dept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputempdept",
								"type": "DatasetReference"
							},
							"name": "empcount"
						},
						{
							"dataset": {
								"referenceName": "outputempdept",
								"type": "DatasetReference"
							},
							"name": "joinout"
						}
					],
					"transformations": [
						{
							"name": "deptcount"
						},
						{
							"name": "joinempdept"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp as string,",
						"          name as string,",
						"          dept as string,",
						"          grade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"source(output(",
						"          dept as string,",
						"          deptname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dept",
						"employee aggregate(groupBy(dept),",
						"     Total_Employees = count(emp)) ~> deptcount",
						"employee, dept join(employee@dept == dept@dept,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinempdept",
						"deptcount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['empcount'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> empcount",
						"joinempdept sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['joinout'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          emp,",
						"          name,",
						"          dept = employee@dept,",
						"          grade,",
						"          deptname",
						"     ),",
						"     partitionBy('hash', 1)) ~> joinout"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empdata')]",
				"[concat(variables('factoryId'), '/datasets/dept')]",
				"[concat(variables('factoryId'), '/datasets/outputempdept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/parameterizeddata')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "parameterized",
								"type": "DatasetReference"
							},
							"name": "parameterisedfilter"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputempdept",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     deptpar as string",
						"}",
						"source(output(",
						"          emp as string,",
						"          name as string,",
						"          dept as string,",
						"          gender as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> parameterisedfilter",
						"parameterisedfilter filter(dept == $deptpar) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['parameterfilter'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/parameterized')]",
				"[concat(variables('factoryId'), '/datasets/outputempdept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pivot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pivotgender",
								"type": "DatasetReference"
							},
							"name": "PIVOT"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputempdept",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "pivotgender"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp as string,",
						"          name as string,",
						"          dept as string,",
						"          gender as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PIVOT",
						"PIVOT pivot(groupBy(dept),",
						"     pivotBy(gender),",
						"     {} = count(gender),",
						"     columnNaming: 'Employee_$N$V_person',",
						"     lateral: false) ~> pivotgender",
						"pivotgender sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/pivotgender')]",
				"[concat(variables('factoryId'), '/datasets/outputempdept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/surrogate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pivotgender",
								"type": "DatasetReference"
							},
							"name": "surrogate"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputempdept",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp as string,",
						"          name as string,",
						"          dept as string,",
						"          gender as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> surrogate",
						"surrogate keyGenerate(output(rownumber as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey",
						"surrogateKey sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/pivotgender')]",
				"[concat(variables('factoryId'), '/datasets/outputempdept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/windowtransfer')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "windowtransferin",
								"type": "DatasetReference"
							},
							"name": "transferwindow"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputempdept",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "window"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp as short,",
						"          name as string,",
						"          dept as string,",
						"          gender as string,",
						"          salary as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> transferwindow",
						"transferwindow window(over({average salary} = dept),",
						"     asc(salary, true),",
						"     avgsalary = avg(salary)) ~> window",
						"window sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['transferwindow'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/windowtransferin')]",
				"[concat(variables('factoryId'), '/datasets/outputempdept')]"
			]
		}
	]
}